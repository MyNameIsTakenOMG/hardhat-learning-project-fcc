{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport './PriceConvertor.sol';\r\n\r\n// custom errors  -- more gas efficient\r\nerror NotOwner();\r\n\r\n// use constant & immutbale keywords to make contracts more gas efficient\r\n\r\ncontract FundMe{\r\n\r\n    using PriceConvertor for uint;\r\n\r\n    uint public constant MINIMUM_USD = 50 * 1e18;\r\n    address[] public funders;\r\n    mapping(address => uint) addressToAmountFunded;\r\n\r\n    address public immutable i_owner;\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress){\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(msg.value.getConvertionRate(priceFeed) > MINIMUM_USD, \"didn't send enough money\");\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n\r\n    function withDraw() public onlyOwner {\r\n        for(uint funderIndex=0; funderIndex<funders.length;funderIndex++){\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n            // reset the array\r\n            funders = new address[](0);\r\n            // actually send ether\r\n            // transfer, throw an error if failed\r\n            // payable(msg.sender).transfer(address(this).balance);\r\n            // send, return a boolean\r\n            // bool sendSuccess = payable (msg.sender).send(address(this).balance);\r\n            // require(sendSuccess,\"send failed\");\r\n            // call, return a boolean and data\r\n            (bool callSuccess , ) = payable (msg.sender).call{value:address(this).balance}(\"\");\r\n            require(callSuccess, \"call failed\");\r\n        }\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n        // require(msg.sender == i_owner,\"not the owner\");\r\n        if(msg.sender != i_owner) { revert NotOwner(); }\r\n        _;\r\n    }\r\n\r\n    // what happens if someone sends ether to this conrtact without calling the fund function,\r\n    // or accidently call some function that doesn't exist but still trigger some code\r\n\r\n    // receive()\r\n    receive() external  payable {\r\n        fund();\r\n    }\r\n    // fallback()\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConvertor {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal  view returns(uint ){\r\n        // ABI\r\n        // address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n        (,int256 answer,,,) = priceFeed.latestRoundData();\r\n        // eg. answer = 3000.00000000   (eth -- USD)s\r\n        return uint(answer*1e10);\r\n    }\r\n\r\n    function getConvertionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal  view returns(uint){\r\n        uint ethPrice = getPrice(priceFeed);\r\n        uint ethAmountInUsd = (ethPrice* ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}